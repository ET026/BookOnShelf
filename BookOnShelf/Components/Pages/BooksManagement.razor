@page "/ApiTest"


@rendermode InteractiveServer

@inject ApplicationDbContext context



@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @GetAlertClass()" role="alert">
        @Message
    </div>
}

=
<div class="card mb-3" style="max-width: 540px;">
    <div class="row g-0">
        <div class="col-md-4">
            <img src="@book.FrontCover" class="img-fluid rounded-start" alt="Sorry i am tired so loading the image failed D:">
        </div>

        <div class="col-md-8">
            <div class="card-body">
                <h5 class="card-title">@book.Title</h5>
                <p class="card-text">  </p>
                <button class="btn btn-green">Reserveren</button>
                <button class="bi bi-info-circle btn end-0" id="infoButton" @onmouseover="ShowPopup" @onmouseleave="HidePopup"></button>
                <div class="popup" id="popup" style="display: @popupDisplay">
                    <p>


                    </p>


                </div>
            </div>
        </div>
    </div>
</div>




@*
1.Boek titel - X
2.Img - X
3.Description - X
4.Exemplaren
5.Paginas
6.Genre
7.Taal
8.ISBN
*@
@* @code {
    [Parameter]
    public Books books { get; set; } = new Books();

    private Languages language { get; set; } = new Languages();
    private Genres genre { get; set; } = new Genres();
    private BooksWriters booksWriters { get; set; } = new BooksWriters();
    private Nationality nationality { get; set; } = new Nationality();
    private Authors author { get; set; } = new Authors();

    List<Books> allBooks = new List<Books>();

    private string? Message;


    protected override async Task OnInitializedAsync()
    {
        allBooks = await context.Books
                .Include(allBooks => allBooks.Language)
                .Include(allBooks => allBooks.Genre)
                .ToListAsync();
    }
} *@

@code {
    [Parameter]
    public Books book { get; set; } = new Books();

    private Languages language { get; set; } = new Languages();
    private Genres genre { get; set; } = new Genres();
    private BooksWriters booksWriters { get; set; } = new BooksWriters();
    private Nationality nationality { get; set; } = new Nationality();
    private Authors author { get; set; } = new Authors();

    private string? Message;

    public async Task GetBookFromISBN()
    {
        var existingISBN = await context.Books.FirstOrDefaultAsync(b => b.ISBNNumber == book.ISBNNumber);


        if (existingISBN is null)
        {
            var client = new HttpClient();
            var requestUri = $"http://openlibrary.org/api/books?bibkeys=ISBN:{book.ISBNNumber}&jscmd=details&format=json";

            try
            {
                using (var response = await client.GetAsync(requestUri))
                {
                    response.EnsureSuccessStatusCode();
                    var responseBody = await response.Content.ReadAsStringAsync();

                    if (!string.IsNullOrEmpty(responseBody))
                    {

                        dynamic bookInfo = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(responseBody);

                        Console.WriteLine(bookInfo);

                        book.Title = bookInfo.items[0].volumeInfo.title;
                        book.BookPages = bookInfo.items[0].volumeInfo.pageCount;
                        book.Description = bookInfo.items[0].volumeInfo.description;
                        language.LanguageName = bookInfo.items[0].volumeInfo.language;
                        foreach (var genres in bookInfo.items[0].volumeInfo.categories)
                        {
                            genre.GenreName = genres;
                        }

                        foreach (var authors in bookInfo.items[0].volumeInfo.authors)
                        {
                            author.AuthorName = authors;
                        }

                        book.FrontCover = bookInfo.items[0].volumeInfo.thumbnail;

                        Console.WriteLine("AAAAAAAAA");
                        Console.WriteLine(genre.GenreName);
                        Console.WriteLine("AAAAAAAAAAA");
                        Console.WriteLine(bookInfo);

                        var existingLanguage = await context.Languages.FirstOrDefaultAsync(l => l.LanguageName == language.LanguageName);
                        var existingGenre = await context.Genres.FirstOrDefaultAsync(g => g.GenreName == genre.GenreName);

                        if (existingLanguage is null)
                        {
                            var newGenreInstance = new Genres { GenreName = genre.GenreName };
                            // await context.Genres.AddAsync(newGenreInstance.GenreName);
                            await context.SaveChangesAsync();
                        }
                        if (existingGenre is null)
                        {
                            var newLanguageInstance = new Languages();
                            newLanguageInstance.LanguageName = language.LanguageName;
                            // context.Languages.AddAsync(newLanguageInstance.LanguageName);
                            await context.SaveChangesAsync();
                        }

                    }
                    else
                    {
                        Console.WriteLine("No book found for the provided ISBN.");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }
        else
        {

        }

    }
}

@code {
    private string popupDisplay = "none";

    private void ShowPopup()
    {
        popupDisplay = "block";
    }

    private void HidePopup()
    {
        popupDisplay = "none";
    }

    private string GetAlertClass()
    {
        if (Message.StartsWith("Success"))
        {
            return "alert-success";
        }
        else if (Message.StartsWith("Error"))
        {
            return "alert-danger";
        }
        else
        {
            return "alert-warning";
        }
    }
}
