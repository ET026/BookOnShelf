@page "/ApiTest"
@using System.Text.Json.Serialization

@rendermode InteractiveServer


<EditForm Model="book" OnValidSubmit="GetBookFromISBN" FormName="ISBN">
    <InputText @bind-Value="book.ISBNNumber">Enter ISBN</InputText>
    <button type="submit">Submit</button>
</EditForm>


@* <div class="card" style="width: 18rem;">
    <img src="@book?.FrontCover" class="card-img-top" alt="...">
    <div class="card-body">
        <h5 class="card-title">@book.Title</h5>
        <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
        <a href="#" class="btn btn-primary">Go somewhere</a>
    </div>
</div> *@

@code {
    [Parameter]
    public Books book { get; set; } = new Books();

    public Languages language { get; set; } = new Languages();
    public Genres genre { get; set; } = new Genres();
    public BooksWriters booksWriters { get; set; } = new BooksWriters();



    public async Task GetBookFromISBN()
    {
        var client = new HttpClient();
        var apiKey = "API-KEY-HERE"; // Replace this with your Google Books API key
        var requestUri = $"https://www.googleapis.com/books/v1/volumes?q=isbn:{book.ISBNNumber}&key={apiKey}";

        try
        {
            using (var response = await client.GetAsync(requestUri))
            {
                response.EnsureSuccessStatusCode();
                var responseBody = await response.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(responseBody))
                {

                    dynamic bookInfo = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(responseBody);

                    book.Title = bookInfo.items[0].volumeInfo.title;
                    book.BookPages = bookInfo.items[0].volumeInfo.pageCount;
                    book.Description = bookInfo.items[0].volumeInfo.description;
                    language.LanguageName = bookInfo.items[0].volumeInfo.language;
                    genre.GenreName = bookInfo.items[0].volumeInfo.categories;

                    

                    Console.WriteLine("AAAAAAAAAAAAAAAAAAAAAAAA");
                    Console.WriteLine(book.Title);
                    Console.WriteLine(book.BookPages);
                    Console.WriteLine(book.Description);
                    Console.WriteLine(language.LanguageName);
                    Console.WriteLine("AAAAAAAAAAAAAAAAAAAAAAAA");

                    
                
                    // // Print the organized book information
                    // Console.WriteLine($"Title: {bookInfo.Title}");
                    // Console.WriteLine($"Authors: {string.Join(", ", bookInfo.Authors)}");
                    // Console.WriteLine($"Published Date: {bookInfo.PublishedDate}");
                    // Console.WriteLine($"Description: {bookInfo.}");
                    // Console.WriteLine($"Thumbnail URL: {bookInfo.ThumbnailUrl}");
                }
                else
                {
                    Console.WriteLine("No book found for the provided ISBN.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
