@page "/ApiTest"


@rendermode InteractiveServer


<EditForm Model="book" OnValidSubmit="GetBookFromISBN" FormName="ISBN">
    <InputText @bind-Value="book.ISBNNumber">Enter ISBN</InputText>
    <button type="submit">Submit</button>
</EditForm>


<div class="card mb-3" style="max-width: 540px;">
    <div class="row g-0">
        <div class="col-md-4">
            <img src="http://books.google.com/books/content?id=i-VtzQEACAAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api" class="img-fluid rounded-start" alt="Sorry i am tired so loading the image failed D:">
        </div>

        <div class="col-md-8">
            <div class="card-body">
                <h5 class="card-title">Can't Hurt me'</h5>
                <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
                <button class="btn btn-green">Reserveren</button>
                <button class="bi bi-info-circle btn end-0" id="infoButton" @onmouseover="ShowPopup" @onmouseleave="HidePopup"></button>
                <div class="popup" id="popup" style="display: @popupDisplay">
                    <p>

                    </p>
                    <hr>
              
                </div>
            </div>
            
        </div>
        
    </div>
</div>
@* 
1.Boek titel - X
2.Img - X
3.Description - X
4.Exemplaren
5.Paginas
6.Genre
7.Taal
8.ISBN
*@
@code {
    [Parameter]
    public Books book { get; set; } = new Books();

    public Languages language { get; set; } = new Languages();
    public Genres genre { get; set; } = new Genres();
    public BooksWriters booksWriters { get; set; } = new BooksWriters();
    public Nationality nationality { get; set; } = new Nationality();



    public async Task GetBookFromISBN()
    {
        var client = new HttpClient();
        var apiKey = "xoxoxo"; // Replace this with your Google Books API key
        var requestUri = $"https://www.googleapis.com/books/v1/volumes?q=isbn:{book.ISBNNumber}&key={apiKey}";

        try
        {
            using (var response = await client.GetAsync(requestUri))
            {
                response.EnsureSuccessStatusCode();
                var responseBody = await response.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(responseBody))
                {

                    dynamic bookInfo = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(responseBody);

                    book.Title = bookInfo.items[0].volumeInfo.title;
                    book.BookPages = bookInfo.items[0].volumeInfo.pageCount;
                    book.Description = bookInfo.items[0].volumeInfo.description;
                    language.LanguageName = bookInfo.items[0].volumeInfo.language;
                    genre.GenreName = bookInfo.items[0].volumeInfo.categories;
                    // nationality.NationalityName = bookInfo.items[0].volumeInfo.nationa

                    Console.WriteLine(bookInfo);
                }
                else
                {
                    Console.WriteLine("No book found for the provided ISBN.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
@code {
    private string popupDisplay = "none";

    private void ShowPopup()
    {
        popupDisplay = "block";
    }

    private void HidePopup()
    {
        popupDisplay = "none";
    }
}
