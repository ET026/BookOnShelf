@page "/"
@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BookOnShelf.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> usermanager

<PageTitle>Log in</PageTitle>

<div class="row justify-content-center">
	<div class="col-md-4">
		<h1 class="align-items-center covadis-orange-color">Log in</h1>
		<br />
		<section>
			<StatusMessage Message="@errorMessage" />
			<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
				<DataAnnotationsValidator />
				<h2>Use a your account to log in.</h2>
				<hr />
				<ValidationSummary class="text-danger" role="alert" />
				<div class="form-floating mb-3">
					<InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
					<label for="email" class="form-label">Email</label>
					<ValidationMessage For="() => Input.Email" class="text-danger" />
				</div>
				<div class="input-group mb-3">
					<div class="form-floating">
						<InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" id="passwordInput" />
						<label for="password" class="form-label">Password</label>
					</div>
					<span class="input-group-text" style="cursor: pointer;" onclick="togglePasswordVisibility()">
						<i class="bi bi-eye-slash" id="togglePassword"></i>
					</span>
					<ValidationMessage For="() => Input.Password" class="text-danger" />
				</div>

				<div class="checkbox mb-3">
					<label class="form-label form-switch">
						<InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
						Remember me
					</label>
				</div>
				<div>
					<button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
				</div>
				<hr class="colo" />
				<div>
					<p>
						<a href="Account/ForgotPassword">Forgot your password?</a>
					</p>
					<p>
						<a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
					</p>
					<p>
						<a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
					</p>
				</div>
			</EditForm>
		</section>
	</div>
</div>


<script>
	function togglePasswordVisibility() {
		var passwordInput = document.getElementById("passwordInput");
		var toggleIcon = document.getElementById('togglePassword');

		if (passwordInput.type === "password") {
			passwordInput.type = "text";
			toggleIcon.classList.remove("bi-eye-slash");
			toggleIcon.classList.add("bi-eye");
		} else {
			passwordInput.type = "password";
			toggleIcon.classList.remove("bi-eye");
			toggleIcon.classList.add("bi-eye-slash");
		}
	}
</script>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
			// var user = await usermanager.GetUserAsync(HttpContext.User);

			// // stuurt gebruiker naar de juiste pagina als hun login nog werkt en ze al ingelogd zijn
			// if (user != null)
			// {
			// 	var roles = await usermanager.GetRolesAsync(user);

			// 	if (roles.Contains("Admin"))
			// 	{
			// 		RedirectManager.RedirectTo("/AllBooks");
			// 	}
			// 	else if (roles.Contains("User"))
			// 	{
			// 		RedirectManager.RedirectTo("/AllBooks");
			// 	}
			// 	else
			// 	{
			// 		// Redirect to a default page
			// 		RedirectManager.RedirectTo("/");
			// 	}
			// }
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            // RedirectManager.RedirectTo(ReturnUrl);

			var user = await usermanager.FindByEmailAsync(Input.Email);

			var roles = await usermanager.GetRolesAsync(user);

			if (roles.Contains("Admin"))
			{
				RedirectManager.RedirectTo("/AllBooks");
			}
			else if (roles.Contains("User"))
			{
				RedirectManager.RedirectTo("/AllBooks");
			}
			else
			{
				// Redirect to a default page
				RedirectManager.RedirectTo("/");
			}
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
